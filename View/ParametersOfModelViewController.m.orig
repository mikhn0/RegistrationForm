//
//  ParametersOfModelViewController.m
//  ModelAlliance
//
//  Created by Imac on 02.09.15.
//  Copyright (c) 2015 Mac. All rights reserved.
//

#import "ParametersOfModelViewController.h"
#import "SelectAgencyViewController.h"
#import "CameraViewController.h"
#import "TakeSelfieViewController.h"
#import "LibraryAPI.h"


@interface ParametersOfModelViewController () <UITextFieldDelegate> {
    UITextField *activeField;
    User *tempUser;
    UserData *tempUserData;
    NSMutableDictionary *beforeDict, *afterDict;
    NSString *linkPortfolio, *linkModels;
}

@property (weak, nonatomic) IBOutlet UIButton *sendBtn;
@property (weak, nonatomic) IBOutlet UIButton *btnChooseAgency;
//@property (weak, nonatomic) IBOutlet UILabel *labelAddYouSocNet;
//@property (weak, nonatomic) IBOutlet UIView *firstBreakLineView;
//@property (weak, nonatomic) IBOutlet UIView *secondBreakLineView;
@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;
@property (weak, nonatomic) IBOutlet UITextField *profileTF;
@property (weak, nonatomic) IBOutlet UITextField *facebookTF;
@property (weak, nonatomic) IBOutlet UIImageView *selfieImageView;
@property (nonatomic) NSString *agencyName;
@property (nonatomic) NSString *cityName;
<<<<<<< HEAD
@property (nonatomic) NSInteger agencyId;
=======
@property (nonatomic) Agency *selectedAgencyClass;
>>>>>>> efb076b968923dab720dff64cfc24f380aa7c4a7
@property (weak, nonatomic) IBOutlet NSLayoutConstraint *topSendBtnConstraint;
@property (weak, nonatomic) IBOutlet NSLayoutConstraint *topAddSelfieBtnConstraint;
@property (weak, nonatomic) IBOutlet UILabel *sendLabel;


- (IBAction)finishRegistration:(id)sender;

@end

@implementation ParametersOfModelViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    if ( iPhone4 ) {
        self.topAddSelfieBtnConstraint.constant = 20;
        self.topSendBtnConstraint.constant = 20;
        [self.view setNeedsUpdateConstraints];
    }
    [self registerForKeyboardNotifications];
    [self.selfieImageView setImage:self.selfieImage];
//    [self.sendBtn.layer setCornerRadius:5.0];
//    [self.sendBtn setTitle:[LNG("Send") uppercaseString] forState:UIControlStateNormal];
    [self.btnChooseAgency setTitle:LNG("Choose_your_agency") forState:UIControlStateNormal];
//    [self.labelAdd YouSocNet setText:LNG("Add your social networks")];

    
    self.selfieImageView.backgroundColor = SHARED_CONTROLLER.currentRoleParametrs[@"selfi_bgr_color"];
    self.btnAddSelfie.titleLabel.textColor = SHARED_CONTROLLER.currentRoleParametrs[@"color"];
    self.btnAddSelfie.titleLabel.text = LNG("Add selfie");
    [self.sendBtn setImage:SHARED_CONTROLLER.currentRoleParametrs[@"send_btn_image"] forState:UIControlStateNormal];
    [self.sendBtn setImage:SHARED_CONTROLLER.currentRoleParametrs[@"send_btn_active_image"] forState:UIControlStateHighlighted];
    self.sendLabel.text = LNG("Send");
    
    
//    [self.sendBtn setImage:currentTypeRole[@"send_btn_active_image"] forState:UIControlStateHighlighted];
//    [self.sendBtn setImage:currentTypeRole[@"send_btn_image"] forState:UIControlStateNormal];

    
//    self.sendBtn.backgroundColor = self.firstBreakLineView.backgroundColor = self.secondBreakLineView.backgroundColor = self.roleColor;
    self.profileTF.attributedPlaceholder = [[NSAttributedString alloc] initWithString:LNG("Profile_agency") attributes:@{NSForegroundColorAttributeName:DEACTIVE_FIELD}];
    self.facebookTF.attributedPlaceholder = [[NSAttributedString alloc] initWithString:@"Facebook" attributes:@{NSForegroundColorAttributeName:DEACTIVE_FIELD}];
    if ( self.roleType == TalentRole ) {
        self.profileTF.enabled = NO;
    }
    if ( self.roleType != ProfessionalModelRole ) {
        self.btnChooseAgency.frame = CGRectZero;
        self.btnChooseAgency.hidden = YES;
    } else {
        self.btnChooseAgency.layer.borderColor = [UIColor colorWithRed:177.0/255.0 green:134.0/255.0 blue:245.0/255.0 alpha:1.0].CGColor;
        self.btnChooseAgency.layer.borderWidth = 1.0;
        self.btnChooseAgency.hidden = NO;
    }
    
    CGSize scrollViewContentSize = self.view.frame.size;
    [self.scrollView setContentSize:scrollViewContentSize];
    
    tempUserData = USER_DATA;
    //tempUser = USER;
//    beforeDict = [[NSMutableDictionary alloc] initWithObjectsAndKeys:
//                  tempUser.firstName ?: @"" ,@"firstName",
//                  tempUser.lastName ?: @"", @"lastName",
//                  tempUser.phone ?: @"", @"phone",
//                  tempUser.birthDate ?: [[NSDate alloc] init], @"birthDate",
//                  tempUser.linkPhotos ?: @"", @"linkPhotos",
//                  tempUser.agencies.mutableCopy ?: @[].mutableCopy, @"agencies",
//                  tempUser.linkPortfolio ?: @"", @"linkPortfolio",
//                  tempUser.linkModels ?: @"", @"linkModels",
//                  tempUser.city, @"city",
//                  tempUser.selfie, @"selfie",
//                  nil];
//    beforeDict = [[NSMutableDictionary alloc] initWithObjectsAndKeys:
//                  tempUserData.firstname ?: @"" ,@"firstName",
//                  tempUserData.lastname ?: @"", @"lastName",
//                  tempUserData.phone ?: @"", @"phone",
//                  tempUserData.birthDate ?: [[NSDate alloc] init], @"birthDate",
//                  tempUserData.link_photo ?: @"", @"link_photo",
//                  tempUserData.agencies.mutableCopy ?: @[].mutableCopy, @"agencies",
//                  tempUserData.link_portfolio ?: @"", @"link_portfolio",
//                  tempUserData.link_model_agency ?: @"", @"link_model_agency",
//                  tempUserData.city, @"city",
//                  tempUserData.selfie, @"selfie",
//                  nil];
//    afterDict = beforeDict.mutableCopy;
    UITapGestureRecognizer *hideKeyboardGesture = [[UITapGestureRecognizer alloc]
                                                   initWithTarget:self action:@selector(hideKeyboard)];
    hideKeyboardGesture.cancelsTouchesInView = NO;
    [self.scrollView addGestureRecognizer:hideKeyboardGesture];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    self.navigationController.navigationBarHidden = NO;
    [self.navigationController.navigationBar setBackgroundImage:[UIImage new]
                                                  forBarMetrics:UIBarMetricsDefault];
    self.navigationController.navigationBar.shadowImage = [UIImage new];
    self.navigationController.navigationBar.translucent = YES;
    self.navigationController.view.backgroundColor = [UIColor clearColor];
    self.navigationController.navigationBar.backgroundColor = [UIColor clearColor];
    
    UIEdgeInsets contentInsets = UIEdgeInsetsZero;
    self.scrollView.contentInset = contentInsets;
    self.scrollView.scrollIndicatorInsets = contentInsets;
    CGPoint scrollPoint = CGPointMake(0.0, 45.0);
    [self.scrollView setContentOffset:scrollPoint animated:YES];
}

- (void)hideKeyboard {
    [self.view endEditing:NO];
}

- (IBAction)finishRegistration:(id)sender {
    USE_APPLICATION;
    if (!allTrim(self.facebookTF.text).length || (!allTrim(self.profileTF.text).length && self.roleType == ProfessionalModelRole)) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:LNG("Please fill all of the fields") delegate:nil cancelButtonTitle:LNG("Btn.OK") otherButtonTitles:nil];
        [alert show];
        return;
    }
    [application showActivityView:LNG("Please wait")];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        
        if ( self.profileTF.text ) {
            tempUserData.link_portfolio = self.profileTF.text;
        }
        if ( self.facebookTF.text ) {
            tempUserData.link_photo = self.facebookTF.text;
        }
        
        if ( self.selfieImage ) {
<<<<<<< HEAD
            tempUserData.selfie = self.selfieImage;
            tempUserData.agencies = @[@(self.agencyId)];
                NSString *targetRole;
                if (self.roleType == CelebrityRole) {
                    targetRole = role_celebrity;
                } else if (self.roleType == TalentRole) {
                    targetRole = role_model;
                } else if (self.roleType == ProfessionalModelRole) {
                    targetRole = role_prof_model;
=======
            NSString *fileName = [NSString stringWithFormat:@"%@-photo.png", [self GetUUID]];
            BOOL isBig = self.selfieImage.size.width > 1024;
            UIImage *scaledImage;
            if (isBig) {
                UIGraphicsBeginImageContext(CGSizeMake(1024, 1024 * self.selfieImage.size.height / self.selfieImage.size.width));
                [self.selfieImage drawInRect:CGRectMake(0, 0, 1024, 1024 * self.selfieImage.size.height / self.selfieImage.size.width)];
                scaledImage = UIGraphicsGetImageFromCurrentImageContext();
                UIGraphicsEndImageContext();
            }
            NSData *imageData = UIImagePNGRepresentation(isBig ? scaledImage : self.selfieImage);//UIImageJPEGRepresentation(isBig ? scaledImage : self.selfieImage, 5);
            PFFile *imageFile = [PFFile fileWithName:fileName data:imageData];
            [imageFile saveInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {
                if (succeeded) {
                    [afterDict setValue:imageFile forKey:@"selfie"];
                    if ([beforeDict isEqualToDictionary:afterDict]) {
                        [application hideActivityView];
                        [self.navigationController popViewControllerAnimated:YES];
                    } else {
                        if (self.agencyName.length && self.cityName.length) {
                            Agency *agencyObj = self.selectedAgencyClass;
//                            agencyObj.name = self.agencyName;
//                            agencyObj.city = self.cityName;
                            [afterDict setValue:@[@{@"city": self.cityName, @"name" : self.agencyName, @"agencyPointer": agencyObj}].mutableCopy forKey:@"agencies"];
                        }
                        PFObject *before = [PFObject objectWithClassName:@"before" dictionary:beforeDict];
                        PFObject *after = [PFObject objectWithClassName:@"after" dictionary:afterDict];
                        
                        RoleUpdateRequest *request = [RoleUpdateRequest object];
                        NSString *targetRole;
                        if (self.roleType == CelebrityRole) {
                            targetRole = role_celebrity;
                        } else if (self.roleType == TalentRole) {
                            targetRole = role_model;
                        } else if (self.roleType == ProfessionalModelRole) {
                            targetRole = role_prof_model;
                        } else {
                            targetRole = role_user;
                        }
                        
                        [DATA_SERVICE deleteRoleUpdateRequestByUser:tempUser block:^(PFObject* tempBefore) {
                            NSLog(@"");
                            request.userId = tempUser;
                            request.targetRole = targetRole;
                            if (tempBefore) {
                                request.before = tempBefore;
                            } else {
                                request.before = before;
                            }
                            request.after = after;
                            [request saveInBackground];
                        }];
                        SHARED_CONTROLLER.currentRoleParametrs = [SHARED_CONTROLLER getRoleParametrsForRoleInt:-1];
                        NSLog(@"current Role Parametrs ==== %@", SHARED_CONTROLLER.currentRoleParametrs);
                        NSLog(@"Title role ==== %@", SHARED_CONTROLLER.currentRoleParametrs[@"title"]);
                        [application startupApplicationFromRegistrationScreen:YES byRole:self.roleType];
                        [[UIApplication sharedApplication] setStatusBarHidden:NO withAnimation:NO];
                    }
>>>>>>> efb076b968923dab720dff64cfc24f380aa7c4a7
                } else {
                    targetRole = role_user;
                }
                tempUserData.target_role = targetRole;
                [[LibraryAPI sharedinstance] updateUserWithParams:tempUserData withCompletion:^(UserData *user, NSError *error) {
                    NSLog(@"ERROR ==== %@", error);
                }];
                [application startupApplicationFromRegistrationScreen:YES byRole:self.roleType];
                [[UIApplication sharedApplication] setStatusBarHidden:NO withAnimation:NO];

        } else {
            [application setActivityText:LNG("Make selfie")];
            [application hideActivityViewWithDelay:1.5];
        }
    });
}

- (void)registerForKeyboardNotifications {
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWasShown:)
                                                 name:UIKeyboardDidShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillBeHidden:)
                                                 name:UIKeyboardWillHideNotification object:nil];
}

// Called when the UIKeyboardDidShowNotification is sent.
- (void)keyboardWasShown:(NSNotification*)aNotification
{
    NSDictionary* info = [aNotification userInfo];
    CGSize kbSize = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
    UIEdgeInsets contentInsets = UIEdgeInsetsMake(0.0, 0.0, kbSize.height, 0.0);
    self.scrollView.contentInset = contentInsets;
    self.scrollView.scrollIndicatorInsets = contentInsets;
    
    // If active text field is hidden by keyboard, scroll it so it's visible
    // Your application might not need or want this behavior.
    CGRect aRect = self.view.frame;
    aRect.size.height -= kbSize.height;
    if (!CGRectContainsPoint(aRect, activeField.frame.origin) ) {
        CGPoint scrollPoint = CGPointMake(0.0, activeField.frame.origin.y-kbSize.height);
        [self.scrollView setContentOffset:scrollPoint animated:YES];
    }
}

// Called when the UIKeyboardWillHideNotification is sent
- (void)keyboardWillBeHidden:(NSNotification*)aNotification
{
    UIEdgeInsets contentInsets = UIEdgeInsetsZero;
    self.scrollView.contentInset = contentInsets;
    self.scrollView.scrollIndicatorInsets = contentInsets;
}

- (void)textFieldDidBeginEditing:(UITextField *)textField
{
    activeField = textField;
    if (textField.tag == 1001 && (textField.text.length <= 25)) {
        
        textField.text = @"https://www.facebook.com/";
    }
}

- (void)textFieldDidEndEditing:(UITextField *)textField
{
    activeField = nil;
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    [textField resignFirstResponder];
    return YES;
}

- (NSString *)GetUUID {
    CFUUIDRef theUUID = CFUUIDCreate(NULL);
    CFStringRef string = CFUUIDCreateString(NULL, theUUID);
    CFRelease(theUUID);
    return (__bridge NSString *)string;
}

- (IBAction)unwindToChooseRoleVC:(UIStoryboardSegue *)unwindSegue {
    if ([unwindSegue.identifier isEqualToString:@"unwindChooseRole"]) {
        SelectAgencyViewController *vc = (SelectAgencyViewController *)unwindSegue.sourceViewController;
        if (vc.selectedAgency) {
            self.agencyName = vc.selectedAgency;
            self.cityName = vc.selectedCity;
<<<<<<< HEAD
            self.agencyId = vc.selectedAgencyId;
=======
            self.selectedAgencyClass = vc.selectedAgencyClass;
>>>>>>> efb076b968923dab720dff64cfc24f380aa7c4a7
            [self.btnChooseAgency setTitle:[NSString stringWithFormat:@"%@ / %@", vc.selectedCity, vc.selectedAgency] forState:UIControlStateNormal];
        }
    }
}


- (IBAction)unwindToThisViewController:(UIStoryboardSegue *)unwindSegue {
    if ([unwindSegue.identifier isEqualToString:@"TakeSelfieUnwindSegue"]) {
        TakeSelfieViewController *takeSelfieVC = (TakeSelfieViewController *)unwindSegue.sourceViewController;
        takeSelfieVC.modalPresentationStyle = UIModalPresentationNone;
    
        if (takeSelfieVC.selfie) {
            self.selfieImageView.image = takeSelfieVC.selfie;
            self.btnAddSelfie.backgroundColor = [UIColor clearColor];
            [self.btnAddSelfie setBackgroundImage:nil forState:UIControlStateNormal];
            self.btnAddSelfie.titleLabel.text = nil;
            self.roleColor = takeSelfieVC.roleColor;
            self.roleType = takeSelfieVC.roleType;
            self.selfieImage = takeSelfieVC.selfie;
        }
    
//        UIView *parametrV = self.settingView;
//        
//        parametrV.frame = CGRectMake(0, self.view.bounds.size.height, parametrV.frame.size.width, parametrV.frame.size.height);
//    
//        [UIView beginAnimations:@"moveView" context:nil];
//        [UIView setAnimationDuration:0.5];
//
//        [parametrV setFrame:CGRectMake(0, 0, parametrV.frame.size.width, parametrV.frame.size.height)];
//        [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
//        [UIView commitAnimations];
    }
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    if ([segue.identifier isEqualToString:@"CameraSegue"]) {
        CameraViewController *vc = (CameraViewController *)segue.destinationViewController;
        vc.roleType = self.roleType;
        vc.roleColor = self.roleColor;
    }
}

@end
